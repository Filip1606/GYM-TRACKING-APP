/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package ui.form;

import domain.Korisnik;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import ui.controller.Controller;

/**
 *
 * @author Filip
 */
public class FrmKreirajKorisnika extends javax.swing.JDialog {

    /**
     * Creates new form FrmNoviKorisnik
     */
    public FrmKreirajKorisnika(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Kreiranje novog korisničkog naloga");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtIme = new javax.swing.JTextField();
        txtPrezime = new javax.swing.JTextField();
        txtMejl = new javax.swing.JTextField();
        txtLozinka = new javax.swing.JTextField();
        btnKreiraj = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Ime:");

        jLabel2.setText("Prezime:");

        jLabel3.setText("Mejl:");

        jLabel4.setText("Lozinka:");

        btnKreiraj.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnKreiraj.setForeground(new java.awt.Color(255, 255, 255));
        btnKreiraj.setText("Kreiraj");
        btnKreiraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKreirajActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtLozinka)
                            .addComponent(txtPrezime)
                            .addComponent(txtIme)
                            .addComponent(txtMejl, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(btnKreiraj)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtMejl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtLozinka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnKreiraj)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnKreirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKreirajActionPerformed
        String ime = txtIme.getText();
        String prezime = txtPrezime.getText();
        String email = txtMejl.getText();
        String lozinka = txtLozinka.getText();
        if (validate(ime, prezime, email, lozinka)) {
            try {
                Korisnik korisnik = new Korisnik();
                korisnik.setIme(ime);
                korisnik.setPrezime(prezime);
                korisnik.setMejl(email);
                korisnik.setLozinka(lozinka);
                Controller.getInstance().kreirajKorisnika(korisnik);
                JOptionPane.showMessageDialog(this, "Sistem je zapamtio korisnički nalog", "Kreiranje korisnika", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da zapamti korisnički nalog", "Kreiranje korisnika", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnKreirajActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnKreiraj;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField txtIme;
    private javax.swing.JTextField txtLozinka;
    private javax.swing.JTextField txtMejl;
    private javax.swing.JTextField txtPrezime;
    // End of variables declaration//GEN-END:variables

    private boolean validate(String ime, String prezime, String email, String lozinka) {
        boolean signal = true;
        try {
            if (ime.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Polje ime ne sme biti prazno", "Greška", JOptionPane.ERROR_MESSAGE);
                signal = false;
            }
            if (prezime.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Polje prezime ne sme biti prazno", "Greška", JOptionPane.ERROR_MESSAGE);
                signal = false;
            }
            if (email.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Polje mejl ne sme biti prazan", "Greška", JOptionPane.ERROR_MESSAGE);
                signal = false;
            }
            if (lozinka.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Polje lozinka ne sme biti prazno", "Greška", JOptionPane.ERROR_MESSAGE);
                signal = false;
            }
            
            if (!ime.isEmpty()) {
                if (ime.length() > 30) {
                    JOptionPane.showMessageDialog(this, "Polje ime ne sme imati vise od 30 karaktera", "Greška", JOptionPane.ERROR_MESSAGE);
                    signal = false;
                }
            }
            
            if (!prezime.isEmpty()) {
                if (prezime.length() > 30) {
                    JOptionPane.showMessageDialog(this, "Polje prezime ne sme imati vise od 30 karaktera", "Greška", JOptionPane.ERROR_MESSAGE);
                    signal = false;
                }
            }
            
            if (!email.isEmpty()) {
                if (email.length() > 40) {
                    JOptionPane.showMessageDialog(this, "Polje mejl ne sme imati vise od 40 karaktera", "Greška", JOptionPane.ERROR_MESSAGE);
                    signal = false;
                }
            }
            
            if (!lozinka.isEmpty()) {
                if (lozinka.length() > 30 || lozinka.length() < 4) {
                    JOptionPane.showMessageDialog(this, "Polje lozinka mora imati izmeju 4 i 30 karaktera", "Greška", JOptionPane.ERROR_MESSAGE);
                    signal = false;
                }
            }
            
            if (!ime.isEmpty()) {
                if (ime.length() <= 30) {
                    if (!ime.matches("[a-zA-Z]+")) {
                        JOptionPane.showMessageDialog(this, "Ime mora da sadrzi samo slova", "Greška", JOptionPane.ERROR_MESSAGE);
                        signal = false;
                    }
                }
            }
            
            if (!prezime.isEmpty()) {
                if (prezime.length() <= 30) {
                    if (!prezime.matches("[a-zA-Z]+")) {
                        JOptionPane.showMessageDialog(this, "Prezime mora da sadrzi samo slova", "Greška", JOptionPane.ERROR_MESSAGE);
                        signal = false;
                    }
                }
            }
            
            List<Korisnik> postojeci = Controller.getInstance().vratiKorisnike();
            for (Korisnik korisnik : postojeci) {
                if (korisnik.getMejl().equals(email)) {
                    JOptionPane.showMessageDialog(this, "Vec postoji korisnik sa ovim mejlom", "Greška", JOptionPane.ERROR_MESSAGE);
                    signal = false;
                }
            }
            
        } catch (Exception ex) {
            Logger.getLogger(FrmKreirajKorisnika.class.getName()).log(Level.SEVERE, null, ex);
        }
        return signal;
    }
}
